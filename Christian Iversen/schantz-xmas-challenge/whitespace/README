# Stack Manipulation (IMP: [Space])
# Stack manipulation is one of the more common operations, hence the shortness of the IMP [Space]. There are four stack instructions.
# Command	Parameters	Meaning
# [Space]	Number	Push the number onto the stack
# [LF][Space]	-	Duplicate the top item on the stack
# [LF][Tab]	-	Swap the top two items on the stack
# [LF][LF]	-	Discard the top item on the stack

PUSH <number>
DUP
SWAP
POP

# Arithmetic (IMP: [Tab][Space])
# Arithmetic commands operate on the top two items on the stack, and replace them with the result of the operation. The first item pushed is considered to be left of the operator.
# Command	Parameters	Meaning
# [Space][Space]	-	Addition
# [Space][Tab]	-	Subtraction
# [Space][LF]	-	Multiplication
# [Tab][Space]	-	Integer Division
# [Tab][Tab]	-	Modulo

ADD
SUB
MUL
DIV
MOD

# Heap Access (IMP: [Tab][Tab])
# Heap access commands look at the stack to find the address of items
# to be stored or retrieved. To store an item, push the address then
# the value and run the store command. To retrieve an item, push the
# address and run the retrieve command, which will place the value
# stored in the location at the top of the stack.
# Command	Parameters	Meaning
# [Space]	-	Store
# [Tab]	-	Retrieve

SET
GET

# Flow Control (IMP: [LF])
# Flow control operations are also common. Subroutines are marked by
# labels, as well as the targets of conditional and unconditional
# jumps, by which loops can be implemented. Programs must be ended by
# means of [LF][LF][LF] so that the interpreter can exit cleanly.
# Command	Parameters	Meaning
# [Space][Space]	Label	Mark a location in the program
# [Space][Tab]	Label	Call a subroutine
# [Space][LF]	Label	Jump unconditionally to a label
# [Tab][Space]	Label	Jump to a label if the top of the stack is zero
# [Tab][Tab]	Label	Jump to a label if the top of the stack is negative
# [Tab][LF]	-	End a subroutine and transfer control back to the caller
# [LF][LF]	-	End the program

LABEL
CALL <label>
JUMP <label>
JUMPZ <label>
JUMPN <label>
RET
HALT

# I/O (IMP: [Tab][LF])
# Finally, we need to be able to interact with the user. There are IO
# instructions for reading and writing numbers and individual
# characters. With these, string manipulation routines can be written.
# The read	instructions take the heap address in which to store the result from the top of the stack.
# Command	Parameters	Meaning
# [Space][Space]	-	Output the character at the top of the stack
# [Space][Tab]	-	Output the number at the top of the stack
# [Tab][Space]	-	Read a character and place it in the location given by the top of the stack
# [Tab][Tab]	-	Read a number and place it in the location given by the top of the stack

WRITE
OUTPUT
READ
INPUT
